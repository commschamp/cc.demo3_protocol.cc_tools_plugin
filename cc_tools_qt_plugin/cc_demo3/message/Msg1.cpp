// Generated by commsdsl2tools_qt v6.3.3

#include "Msg1.h"

#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_demo3/options/DefaultOptions.h"

namespace cc_tools_qt_plugin
{

namespace cc_demo3
{

namespace message
{

namespace
{

static QVariantMap createProps_f1(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_demo3::message::Msg1Fields<cc_tools_qt_plugin::cc_demo3::options::DefaultOptions>::F1;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_f2(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_demo3::message::Msg1Fields<cc_tools_qt_plugin::cc_demo3::options::DefaultOptions>::F2Field;
    using OptField = ::cc_demo3::message::Msg1Fields<cc_tools_qt_plugin::cc_demo3::options::DefaultOptions>::F2;
    auto props =
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();

    return
        cc_tools_qt::property::field::ForField<OptField>()
            .name(Field::name())
            .uncheckable()
            .field(std::move(props))
            .asMap();
}

static QVariantMap createProps_f3(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_demo3::message::Msg1Fields<cc_tools_qt_plugin::cc_demo3::options::DefaultOptions>::F3Field;
    using OptField = ::cc_demo3::message::Msg1Fields<cc_tools_qt_plugin::cc_demo3::options::DefaultOptions>::F3;
    auto props =
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();

    return
        cc_tools_qt::property::field::ForField<OptField>()
            .name(Field::name())
            .uncheckable()
            .field(std::move(props))
            .asMap();
}

static QVariantMap createProps_f4(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_demo3::message::Msg1Fields<cc_tools_qt_plugin::cc_demo3::options::DefaultOptions>::F4Field;
    using OptField = ::cc_demo3::message::Msg1Fields<cc_tools_qt_plugin::cc_demo3::options::DefaultOptions>::F4;
    auto props =
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();

    return
        cc_tools_qt::property::field::ForField<OptField>()
            .name(Field::name())
            .uncheckable()
            .field(std::move(props))
            .asMap();
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_f1(false));
    props.append(createProps_f2(false));
    props.append(createProps_f3(false));
    props.append(createProps_f4(false));
    return props;
}

} // namespace

Msg1::Msg1() = default;
Msg1::~Msg1() = default;
Msg1& Msg1::operator=(const Msg1&) = default;
Msg1& Msg1::operator=(Msg1&&) = default;

const QVariantList& Msg1::fieldsPropertiesImpl() const
{
    static const QVariantList Props = createProps();
    return Props;
}

} // namespace message

} // namespace cc_demo3

} // namespace cc_tools_qt_plugin
